{"version":3,"sources":["gl.js","Editor.js","Canvas.js","App.js","serviceWorker.js","index.js","App.module.css"],"names":["loadShader","gl","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","info","String","getShaderInfoLog","deleteShader","startShader","Editor","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","e","latestValue","ref","React","createRef","_this2","rowStyle","margin","padding","react_default","a","createElement","style","width","height","display","justifyContent","Container_default","Row_default","Col_default","xs","Nav_default","variant","defaultActiveKey","Item","Link","eventKey","disabled","objectSpread","backgroundColor","lib_default","mode","theme","name","classes","editor","editorProps","$blockScrolling","class","value","annotations","props","minHeight","className","buttonGroup","Button_default","onClick","onRun","PureComponent","Canvas","boxContainer","color","children","marginBottom","vsSource","fsSource","App","initPass","pass","shaderProgram","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","alert","getProgramInfoLog","setShader","setState","errors","split","row","Number","length","text","slice","join","setTimeout","passes","push","screenWidth","screenHeight","program","attribLocations","vertexPosition","getAttribLocation","uniformLocations","iTime","getUniformLocation","resolution","buffers","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","position","initBuffers","requestAnimationFrame","animate","forEach","i","programInfo","readBuffer","writeBuffer","toScreen","clearColor","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","FLOAT","vertexAttribPointer","enableVertexAttribArray","useProgram","uniform2f","uniform1f","performance","now","bindFramebuffer","FRAMEBUFFER","viewport","fbo","bindTexture","TEXTURE_2D","texture","uniform1i","bufferLocations","drawArrays","TRIANGLE_STRIP","drawScene","canvasRef","state","canvas","current","getContext","header","fluid","overflow","simplebar_react_esm","marginTop","Canvas_Canvas","Editor_Editor","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","canvasContainer"],"mappings":"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","file":"static/js/main.e1e2335e.chunk.js","sourcesContent":["\r\n\r\n\r\nclass Texture {\r\n    constructor(gl, width, height) {\r\n        const targetTextureWidth = width;\r\n        const targetTextureHeight = height;\r\n        const targetTexture = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, targetTexture);\r\n        \r\n    \r\n        // define size and format of level 0\r\n        this.level = 0;\r\n        const internalFormat = gl.RGBA;\r\n        const border = 0;\r\n        const format = gl.RGBA;\r\n        const type = gl.UNSIGNED_BYTE;\r\n        const data = null;\r\n        gl.texImage2D(gl.TEXTURE_2D, this.level, internalFormat,\r\n                        targetTextureWidth, targetTextureHeight, border,\r\n                        format, type, data);\r\n        \r\n        // set the filtering so we don't need mips\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    \r\n        this.width  = width;\r\n        this.height = height;\r\n        this.texture = targetTexture;\r\n        this.fbo    = createFBO(gl, targetTexture, this.level);\r\n    }\r\n}\r\n\r\nexport function setUp(gl) {\r\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n    // Clear the color buffer with specified clear color\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n}\r\n\r\nexport function createTexture(gl, width, height) {\r\n    return new Texture(gl, width, height);\r\n}\r\n\r\nexport function createFBO(gl, tex, level) {\r\n    // Create and bind the framebuffer\r\n    const fb = gl.createFramebuffer();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\r\n    \r\n    // attach the texture as the first color attachment\r\n    const attachmentPoint = gl.COLOR_ATTACHMENT0;\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachmentPoint, gl.TEXTURE_2D, tex, level);\r\n    return fb;\r\n}\r\n\r\nexport function drawScene(gl, programInfo, buffers, readBuffer, writeBuffer, toScreen) {\r\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque\r\n    gl.clearDepth(1.0);                 // Clear everything\r\n    gl.enable(gl.DEPTH_TEST);           // Enable depth testing\r\n    gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\r\n  \r\n    // Clear the canvas before we start drawing on it.\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    {\r\n      const numComponents = 2;  // pull out 2 values per iteration\r\n      const type = gl.FLOAT;    // the data in the buffer is 32bit floats\r\n      const normalize = false;  // don't normalize\r\n      const stride = 0;         // how many bytes to get from one set of values to the next\r\n                                // 0 = use type and numComponents above\r\n      const offset = 0;         // how many bytes inside the buffer to start from\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\r\n      gl.vertexAttribPointer(\r\n          programInfo.attribLocations.vertexPosition,\r\n          numComponents,\r\n          type,\r\n          normalize,\r\n          stride,\r\n          offset);\r\n      gl.enableVertexAttribArray(\r\n          programInfo.attribLocations.vertexPosition);\r\n    }\r\n  \r\n    // Tell WebGL to use our program when drawing\r\n  \r\n    gl.useProgram(programInfo.program);\r\n\r\n    const resolution = [1280, 720];\r\n    gl.uniform2f(\r\n        programInfo.uniformLocations.resolution,\r\n        resolution[0],\r\n        resolution[1]\r\n    );\r\n\r\n    gl.uniform1f(\r\n        programInfo.uniformLocations.iTime,\r\n        performance.now() / 1000\r\n    )\r\n\r\n    if(!toScreen) {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, readBuffer.fbo);\r\n        gl.bindTexture(gl.TEXTURE_2D, writeBuffer.texture);\r\n        gl.uniform1i(programInfo.bufferLocations[0], 0);\r\n        gl.viewport(0, 0, readBuffer.width, readBuffer.height);\r\n    }else {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        gl.viewport(0, 0, programInfo.screenWidth, programInfo.screenHeight);\r\n    }\r\n    \r\n    {\r\n      const offset = 0;\r\n      const vertexCount = 4;\r\n      gl.drawArrays(gl.TRIANGLE_STRIP, offset, vertexCount);\r\n    }\r\n}\r\n\r\nexport function initBuffers(gl) {\r\n  const positionBuffer = gl.createBuffer();\r\n\r\n  // Select the positionBuffer as the one to apply buffer\r\n  // operations to from here out.\r\n\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n  // Now create an array of positions for the square.\r\n\r\n  const positions = [\r\n    -1.0,  1.0,\r\n     1.0,  1.0,\r\n    -1.0, -1.0,\r\n     1.0, -1.0,\r\n  ];\r\n\r\n  // Now pass the list of positions into WebGL to build the\r\n  // shape. We do this by creating a Float32Array from the\r\n  // JavaScript array, then use it to fill the current buffer.\r\n\r\n  gl.bufferData(gl.ARRAY_BUFFER,\r\n                new Float32Array(positions),\r\n                gl.STATIC_DRAW);\r\n\r\n  return {\r\n    position: positionBuffer,\r\n  };\r\n}\r\n\r\nexport function setShader(gl, vsSource, fsSource) {\r\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\r\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n\r\n    \r\n    if(typeof fragmentShader !== \"object\") {\r\n      return fragmentShader;\r\n    }\r\n\r\n    const shaderProgram = gl.createProgram();\r\n    gl.attachShader(shaderProgram, vertexShader);\r\n    gl.attachShader(shaderProgram, fragmentShader);\r\n    gl.linkProgram(shaderProgram);\r\n  \r\n    // If creating the shader program failed, alert\r\n  \r\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n      alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\r\n      return null;\r\n    }\r\n  \r\n    return shaderProgram;\r\n}\r\n\r\nexport function loadShader(gl, type, source) {\r\n    const shader = gl.createShader(type);\r\n    gl.shaderSource(shader, source);\r\n    gl.compileShader(shader);\r\n  \r\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n      const info = String(gl.getShaderInfoLog(shader));\r\n      gl.deleteShader(shader);\r\n      return info;\r\n    }\r\n  \r\n    return shader;\r\n  }\r\n","import React, { PureComponent } from \"react\";\r\nimport classes from \"./App.module.css\";\r\nimport AceEditor from \"react-ace\";\r\nimport './Navbar.css'\r\nimport \"brace/mode/glsl\";\r\nimport \"brace/theme/github\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\n\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst startShader = `void mainImage( out vec4 fragColor, in vec2 fragCoord )\r\n{\r\n    // Normalized pixel coordinates (from 0 to 1)\r\n    vec2 uv = fragCoord/iResolution.xy;\r\n\r\n    // Time varying pixel color\r\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\r\n\r\n    // Output to screen\r\n    fragColor = vec4(col,1.0);\r\n}\r\n`;\r\n\r\nexport default class Editor extends PureComponent {\r\n  constructor() {\r\n    super();\r\n\r\n    this.latestValue = startShader;\r\n    this.ref = React.createRef();\r\n  }\r\n\r\n  onChange = e => {\r\n    this.latestValue = e;\r\n  };\r\n\r\n  render() {\r\n\r\n    const firstColumnWidth = 2;\r\n    const rowStyle = {margin: 0, padding: 0};\r\n\r\n    return (\r\n      <div\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <Container >\r\n\r\n          <Row style={rowStyle}>\r\n          <Col xs={firstColumnWidth}></Col>\r\n            <Col>\r\n              <Nav variant=\"tabs\" defaultActiveKey=\"/home\">\r\n                  <Nav.Item>\r\n                    <Nav.Link >Active</Nav.Link>\r\n                  </Nav.Item>\r\n                  <Nav.Item>\r\n                    <Nav.Link eventKey=\"link-1\">Option 2</Nav.Link>\r\n                  </Nav.Item>\r\n                  <Nav.Item>\r\n                    <Nav.Link eventKey=\"disabled\" disabled>\r\n                      Disabled\r\n                    </Nav.Link>\r\n                  </Nav.Item>\r\n                </Nav>\r\n                </Col>\r\n          </Row>\r\n\r\n          <Row style={rowStyle}>\r\n            <Col xs={firstColumnWidth} style={{  backgroundColor: \"green\", ...rowStyle,margin: 3, }}>\r\n              <div ></div>\r\n            </Col >\r\n            <Col style={rowStyle}>\r\n              <AceEditor\r\n                mode=\"glsl\"\r\n                theme=\"github\"\r\n                onChange={this.onChange}\r\n                name={classes.editor}\r\n                editorProps={{ $blockScrolling: true }}\r\n                class={classes.editor}\r\n                value={this.latestValue}\r\n                ref={this.ref}\r\n                annotations={this.props.annotations}\r\n                style={{ width: \"100%\", minHeight: 600 }}\r\n              />\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row style={rowStyle}>\r\n            <Col xs={firstColumnWidth} style={{...rowStyle, margin: 6}}></Col>\r\n            <Col style={rowStyle}>\r\n              <div className={classes.buttonGroup}>\r\n                <Button onClick={() => this.props.onRun(this.latestValue)}>\r\n                  RUN!\r\n                </Button>\r\n                <Button onClick={() => this.props.onRun(this.latestValue)}>\r\n                  RUN!\r\n                </Button>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react'\r\nimport classes from \"./App.module.css\";\r\n\r\nexport default class Canvas extends PureComponent {\r\n\r\n\r\n  render() {\r\n    return (\r\n        <div className={classes.boxContainer}>\r\n        <h2 style={{color: \"#efefef\"}}>TITLE - by whoever</h2>\r\n        <div>\r\n            \r\n            {this.props.children}\r\n            <div style={{ height:\"5%\", backgroundColor:\"gray\", display: \"flex\", justifyContent: \"space-around\"}}>\r\n                HELLO\r\n\r\n                COTNROLS ABOUT SHADER HERE\r\n                <div></div>\r\n            </div>\r\n            <div style={{ height:\"15%\", backgroundColor:\"green\"}}>\r\n                HELLO\r\n\r\n                TEXT ABOUT SHADER HERE\r\n            </div>\r\n\r\n\r\n            <div style={{height:1000, backgroundColor:\"blue\", marginBottom: 15}}>\r\n                HELLO\r\n                COMMENTS ABOUT SHADER HERE\r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport { setShader, initBuffers, drawScene } from \"./gl.js\";\nimport Editor from \"./Editor\";\n\n\nimport SimpleBar from 'simplebar-react';\nimport 'simplebar/dist/simplebar.min.css';\n\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nimport classes from \"./App.module.css\";\nimport Canvas from \"./Canvas\";\n\nconst vsSource = `#version 300 es\nin vec4 aVertexPosition;\nvoid main() {\n  gl_Position =  aVertexPosition;\n}`;\n\nconst fsSource = `#version 300 es\n  precision mediump float;\n  uniform vec2 iResolution;\n  uniform float iTime;\n  uniform vec2 iMouse;\n  out vec4 fragColor;\n\n  void mainImage(out vec4 fragColor, in vec2 fragCoord);\n  void main() {\n    mainImage(fragColor, gl_FragCoord.xy);\n  }\n\\n\n`;\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.canvasRef = React.createRef();\n    this.state = { errors: [] };\n  }\n  componentDidMount() {\n    this.canvas = this.canvasRef.current;\n    this.canvas.width = 720;\n    this.canvas.height = 480;\n    this.canvas.style.backgroundColor = \"black\";\n    this.gl = this.canvas.getContext(\"webgl2\");\n    this.passes = [];\n  }\n\n  initPass = pass => {\n    this.shaderProgram = setShader(this.gl, vsSource, fsSource + pass);\n    this.setState({ errors: [] });\n\n    if (typeof this.shaderProgram !== \"object\") {\n      const split = this.shaderProgram.split(\":\");\n      const row = Number(split[2]) - fsSource.split(\"\\n\").length;\n      const text = split.slice(3).join(\" \");\n      this.setState({\n        errors: [\n          {\n            row: row,\n            text: text,\n            type: \"error\"\n          }\n        ]\n      });\n\n      setTimeout(2000, () => this.setState({ errors: null }));\n      return;\n    }\n\n    this.passes.push({\n      screenWidth: 1280,\n      screenHeight: 720,\n      program: this.shaderProgram,\n      attribLocations: {\n        vertexPosition: this.gl.getAttribLocation(\n          this.shaderProgram,\n          \"aVertexPosition\"\n        )\n      },\n      uniformLocations: {\n        iTime: this.gl.getUniformLocation(this.shaderProgram, \"iTime\"),\n        resolution: this.gl.getUniformLocation(\n          this.shaderProgram,\n          \"iResolution\"\n        )\n      }\n    });\n\n    this.buffers = initBuffers(this.gl);\n    requestAnimationFrame(this.animate);\n  };\n\n  onRun = value => {\n    this.passes = [];\n    this.initPass(value);\n  };\n\n  animate = () => {\n    this.passes.forEach((pass, i) => {\n      drawScene(\n        this.gl,\n        pass,\n        this.buffers,\n        this.readBuffer,\n        this.writeBuffer,\n        i === this.passes.length - 1\n      );\n    });\n\n    requestAnimationFrame(this.animate);\n  };\n\n  render() {\n    const marginTop = \"5%\";\n\n    return (\n      <div className={classes.App}>\n        <header className={classes.header} >\n          <h1>SHADERline</h1>\n        </header>\n        <Container fluid style={{height: \"92.5%\", overflow: \"hidden\"}}>\n          <Row style={{height: \"100%\"}}> \n          <SimpleBar  style={{width:\"45%\", height:\"100%\"}}>\n            <Col style={{marginTop}}>\n            \n                <Canvas>\n                  <canvas ref={this.canvasRef} className=\"canvas\" />\n                </Canvas>\n              \n            </Col>\n            </SimpleBar>\n\n            <Col style={{marginTop}}>\n              <Editor annotations={this.state.errors} onRun={this.onRun} />\n            </Col>\n          </Row>\n          >\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__ta45O\",\"buttonGroup\":\"App_buttonGroup__6d5pK\",\"header\":\"App_header__il85O\",\"canvas\":\"App_canvas__38sae\",\"editor\":\"App_editor__Eu0fx\",\"canvasContainer\":\"App_canvasContainer__1S2pZ\",\"boxContainer\":\"App_boxContainer__3bEwn\"};"],"sourceRoot":""}